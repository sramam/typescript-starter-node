#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const readline = require('readline');
const cp = require('child_process');


const processPkgJson = (ctx) => {
  let pkg = JSON.parse(fs.readFileSync('package.json', 'utf8'));
  delete pkg.scripts.postinstall;
  pkg.name = ctx.app;
  pkg.description = '';
  pkg.keywords = [];
  pkg.repository = `${ctx.githost}:${ctx.org}/${ctx.app}`;
  fs.writeFileSync('package.json', JSON.stringify(pkg, null, 2), 'utf8');
}

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

// defaults
const app = path.basename(process.cwd());
const githost = 'github';


function sed(fname, match_re, replacement) {
  const content = fs.readFileSync(fname, 'utf8');
  fs.writeFileSync(fname, content.replace(match_re, replacement), 'utf8');
}

function rimraf(dir) {
  // console.log(`deleting ${dir}`);
  if (dir === '/') return;
  if (fs.existsSync(dir)) {
    fs.readdirSync(dir).forEach(function (file, index) {
      var curdir = path.join(dir, file);
      if (fs.lstatSync(curdir).isDirectory()) { // recurse
        rimraf(curdir);
      } else { // delete file
        fs.unlinkSync(curdir);
      }
    });
    fs.rmdirSync(dir);
  }
};

function spawn(cmd, args, opts) {
  opts = opts || {
    cwd: process.cwd(),
    stdio: 'inherit'
  };
  console.log([cmd].concat(args).join(' '));
  return new Promise((resolve, reject) => {
    const proc = cp.spawn(cmd, args, opts);
    proc.on('close', code => {
      code ? reject(code) : resolve()
    });
  });
}

let result = {};

const p = new Promise((resolve, reject) => {
  console.log('---');
  const askGitHost = () => {
    rl.question(`git host (gh, bb or gl): `, (answer) => {
      if (answer) {
        const git = {
          gh: 'github',
          bb: 'bitbucket',
          gl: 'gitlab',
          gitlab: 'gitlab',
          github: 'github',
          bitbucket: 'bitbucket'
        }
        result.githost = git[answer];
        if (result.githost) {
          return resolve(result);
        } else {
          console.log('must be one of "gh", "bb", "gl"');
        }
      }
      askGitHost(); // loop
    });
  };
  askGitHost();
}).then(result => {
  return new Promise((resolve, reject) => {
    const askGitOrg = () => {
      rl.question(`git user/org name: `, (answer) => {
        if (answer) {
          result.org = answer;
          return resolve(result);
        }
        askGitOrg(); // loop
      });
    };
    askGitOrg();
  });
}).then(result => {
  return new Promise((resolve, reject) => {
    const appName = () => {
      rl.question(`Name of the project (${app}): `, (answer) => {
        result.app = answer || app;
        return resolve(result);
      });
    }
    appName();
  });
}).then(result => {
  return new Promise((resolve, reject) => {
    const askConductEmail = () => {
      rl.question(
        `Email address for code-of-conduct violations: `,
        conduct => {
          if (conduct) {
            result.conduct = conduct;
            rl.close();
            console.log('---');
            return resolve(result);
          }
          askConductEmail();
        });
    };
    askConductEmail();
  });
}).then(result => {
  const re = {
    app: /typescript-starter-node/g,
    org: /sramam/g,
    conduct: `[REPLACE EMAIL]`
  };
  processPkgJson(result);
  // reset changelog.md
  fs.writeFileSync('CHANGELOG.md', '', 'utf8');
  // sed('./package.json', re.app, result.app);
  const url = `${result.org}/${result.app}`;
  sed('./README.md', re.app, result.app);
  sed('./README.md', re.org, result.org);
  console.log(`project renamed to ${url}`);
  if (result.conduct) {
    rl.close();
    sed('./code-of-conduct.md', re.conduct, result.conduct);
    console.log('--');
    console.log(`code-of-conduct contact email set to ${result.conduct}`);
  } else {
    console.log(`Please update the contact email in code-of-conduct.md`);
  }
  return result;
}).then(result => {
  // delete old git repo and initialize a new one.
  rimraf(path.join(process.cwd(), '.git'));
  rimraf(path.join(process.cwd(), 'scripts'));
  return result;
}).then(result => {
  // initialize new git repo
  return spawn('git', ['init']);
  return result;
}).then(result => {
  fs.unlinkSync('.reinit');
  fs.unlinkSync('.travis.yml');
  fs.renameSync('_travis.yml', '.travis.yml');
  console.log(``)
  console.log(`git repo has been reset - please configure git username/email, like so`);
  console.log(`    git config user.name \"John Doe\"`);
  console.log(`    git config user.email john@doe.com`);
  console.log(``);
  return result;
}).then(result => {
  return spawn(`npm`, [`install`]).then(() => result);
}).then(result => {
  return spawn(`npm`, [`run`, `build:dist`]).then(() => result);
}).then(result => {
  return spawn(`git`, [`add`, `.`, `--all`]).then(() => result);
}).then(result => {
  console.log(`---`);
  console.log(`The repo has been properly re-initialized.`);
  console.log(`Your turn. Go forth and make a brave new npm package...`);
  console.log(`---`);
}).catch(err => console.error(err));
